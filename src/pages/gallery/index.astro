---
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";
import Folders from "../../components/Folders.astro";

const { results: images } = await fetch(
  "https://jvphotography.pages.dev/api/gallery/images"
)
  .then((res) => res.json())
  .catch((error) => console.log(error));

interface Image {
  id: string;
  slug: string;
  name: string;
  tags: string;
  folder: string;
}

const galleryImages = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/images/collection/thumbnails/*.{jpeg,jpg,png,gif}"
);
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <meta name="generator" content={Astro.generator} />
    <meta name="robots" content="index, follow" />
    <link
      rel="preload"
      href="/assets/fonts/JosefinSlab-Regular.ttf"
      as="font"
    />
    <link
      rel="preload"
      href="/assets/fonts/JosefinSlab-SemiBold.ttf"
      as="font"
    />
    <link rel="preload" href="/assets/fonts/Inter-Regular.ttf" as="font" />
    <link
      rel="preload"
      href="/assets/fonts/OverpassMono-Regular.ttf"
      as="font"
    />
    <title>Gallery • Johnathan Verstraaten</title>
    <meta name="author" content="Johnathan Verstraaten" />
    <meta name="description" content="A collection of my photography" />
    <meta property="og:title" content="Gallery • Johnathan Verstraaten" />
    <meta property="og:url" content="https://jvphotography.pages.dev/gallery" />
    <meta
      property="og:image"
      content="https://jvphotography.pages.dev/assets/images/preview.png"
    />
    <meta property="og:type" content="website" />
  </head>
  <body>
    <Folders />
    <main>
      <div class="overlay"></div>
      <header>
        <div class="search">
          <button id="search-button">
            <svg
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M20 20L14.9255 14.9255M14.9255 14.9255C16.0837 13.7673 16.8 12.1673 16.8 10.4C16.8 6.86538 13.9346 4 10.4 4C6.86538 4 4 6.86538 4 10.4C4 13.9346 6.86538 16.8 10.4 16.8C12.1673 16.8 13.7673 16.0837 14.9255 14.9255Z"
                stroke="#5B5B5B"
                stroke-linecap="round"
                stroke-linejoin="round"></path>
            </svg>
          </button>
          <input
            type="search"
            id="search"
            placeholder="Search..."
            tabindex="-1"
          />
        </div>
        <h1 id="title">All Photos</h1>
        <button id="menu-button">
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M4 6.5H20M20 18.5H4M4 12.5H20"
              stroke="#5B5B5B"
              stroke-linecap="round"></path>
          </svg>
        </button>
      </header>
      <div class="content">
        {
          images.reverse().map((image: Image) => (
            <a
              href={`/photo/${image.slug}`}
              class="image"
              data-folder={image.folder}
              data-tags={image.tags}
              data-visible="true"
            >
              <div class="outer">
                <Image
                  src={galleryImages[
                    `/src/assets/images/collection/thumbnails/${image.id}.jpg`
                  ]()}
                  alt={image.name}
                  loading="lazy"
                />
              </div>
              <span>{image.name}</span>
            </a>
          ))
        }
      </div>
    </main>
  </body>
</html>

<style is:global lang="scss">
  @use "../../styles/base";
  @use "../../styles/scrollbar";
</style>

<style lang="scss">
  @use "../../styles/font";
  @use "../../styles/color";

  body {
    padding: 6px 0 0 300px;

    @media screen and (max-width: 1024px) {
      padding: 6px 0 0 250px;

      @media screen and (max-width: 768px) {
        padding: 6px 0 0 0;
      }
    }

    main {
      width: 100%;
      height: auto;
      padding: 140px 30px 100px;

      @media screen and (max-height: 640px) {
        padding: 100px 30px 70px;
      }

      .overlay {
        position: fixed;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        background-color: color.$neutral950;
        opacity: 0;
        transition: opacity 0.25s;
        z-index: -1;

        @media screen and (min-width: 769px) {
          opacity: 0 !important;
          z-index: -1 !important;
        }
      }

      header {
        height: 100px;
        padding: 50px 30px 0;
        position: fixed;
        top: 6px;
        left: 300px;
        right: 0;
        background-color: white;
        box-shadow: 0 4px 10px 3px white;
        display: flex;
        flex-direction: row-reverse;
        justify-content: space-between;
        align-items: center;
        z-index: 2;

        @media screen and (max-width: 1024px) {
          left: 250px;

          @media screen and (max-width: 768px) {
            left: 0;
          }
        }

        @media screen and (max-height: 640px) {
          height: 70px;
          padding: 20px 30px 0;
        }

        &::after {
          content: "";
          display: block;
          position: absolute;
          bottom: 0;
          left: 30px;
          right: 30px;
          height: 1px;
          background-color: color.$neutral400;
        }

        #menu-button {
          width: 24px;
          height: 24px;
          display: none;

          @media screen and (max-width: 768px) {
            display: block;
          }
        }

        h1 {
          width: fit-content;
          font-size: 24px;
          font-family: font.$serif;
        }

        div {
          line-height: 0;
          display: flex;
          align-items: center;

          #search {
            width: 0;
            height: 32px;
            border-bottom: 1px solid color.$neutral400;
            margin-left: 0;
            cursor: text;
            transition-property: width, margin-left;
            transition-duration: 0.25s;
            font-size: 14px;
            color: color.$neutral700;

            &:focus {
              outline: 0;
            }
          }
        }
      }

      .content {
        width: 100%;
        height: fit-content;
        display: grid;
        gap: 40px;
        grid-template-columns: repeat(8, minmax(0, 1fr));

        @media screen and (max-width: 3000px) {
          grid-template-columns: repeat(7, minmax(0, 1fr));
        }

        @media screen and (max-width: 2512px) {
          grid-template-columns: repeat(6, minmax(0, 1fr));
        }

        @media screen and (max-width: 2000px) {
          grid-template-columns: repeat(5, minmax(0, 1fr));
        }

        @media screen and (max-width: 1536px) {
          grid-template-columns: repeat(4, minmax(0, 1fr));
        }

        @media screen and (max-width: 1280px) {
          grid-template-columns: repeat(3, minmax(0, 1fr));
        }

        @media screen and (max-width: 920px) {
          grid-template-columns: repeat(2, minmax(0, 1fr));
        }

        @media screen and (max-width: 620px) {
          gap: 20px;
        }

        @media screen and (max-width: 450px) {
          grid-template-columns: repeat(1, minmax(0, 1fr));
        }

        .image {
          display: block;
          line-height: 0;
          width: 100%;
          height: auto;

          .outer {
            width: 100%;
            aspect-ratio: 1/1;
            box-shadow: 0 4px 10px 2px hsla(0, 0%, 0%, 10%);
            margin-bottom: 10px;
            border-radius: 10px;
            overflow: hidden;
            background-color: color.$primary600;

            img {
              width: 100%;
              height: 100%;
              object-fit: cover;
              object-position: center;
              transform-origin: center;
              transform: scale(1.05);
              transition-property: transform, opacity, filter;
              transition-duration: 0.25s;
            }
          }

          span {
            color: color.$neutral600;
            font-size: 16px;
            font-family: font.$mono;
            line-height: 1.5;
            text-decoration: underline;
            text-decoration-color: transparent;
            text-underline-offset: 3px;
            transition: text-decoration 0.25s;
          }

          &:hover,
          &:focus {
            outline: none;

            img {
              transform: scale(1) !important;
              opacity: 0.5;
              filter: grayscale(1);
            }

            span {
              text-decoration-color: color.$neutral600;
            }
          }
        }
      }
    }
  }
</style>

<script>
  const menuButton = document.querySelector("#menu-button") as HTMLElement;
  const menuCloseButton = document.querySelector("#close-menu") as HTMLElement;
  const overlay = document.querySelector(".overlay") as HTMLElement;
  const nav = document.querySelector("nav") as HTMLElement;
  const folders = document.querySelectorAll(
    "input[name=folder]"
  ) as NodeListOf<HTMLInputElement>;
  const searchButton = document.querySelector("#search-button") as HTMLElement;
  const searchBox = document.querySelector("#search") as HTMLInputElement;
  const headerElements = document.querySelectorAll(
    "header > *:not(.search)"
  ) as NodeListOf<HTMLElement>;

  const menuOpen = () => {
    overlay.style.opacity = "0.5";
    overlay.style.zIndex = "5";
    nav.style.left = "0";
  };

  const menuClose = () => {
    overlay.style.opacity = "0";
    setTimeout(() => (overlay.style.zIndex = "-1"), 250);
    nav.removeAttribute("style");
  };

  menuButton.addEventListener("click", menuOpen);

  overlay.addEventListener("click", menuClose);
  menuCloseButton.addEventListener("click", menuClose);
  folders.forEach((folder) => {
    folder.addEventListener("click", () => {
      if (window.innerWidth <= 768) menuClose();
    });
  });

  searchButton.addEventListener("click", () => {
    const windowWidth = window.innerWidth;

    if (windowWidth <= 768) {
      headerElements.forEach((element) => (element.style.display = "none"));
      searchBox.style.width = "calc(100vw - 94px)";
    } else {
      searchBox.style.width = "200px";
    }

    searchBox.focus();
    searchBox.style.marginLeft = "10px";
    searchBox.setAttribute("tabindex", "0");
  });

  searchBox.addEventListener("blur", () => {
    if ((searchBox as HTMLInputElement).value === "") {
      setTimeout(() => {
        headerElements.forEach((element) => element.removeAttribute("style"));
      }, 250);
      searchBox.style.width = "0";
      searchBox.style.marginLeft = "0";
      searchBox.setAttribute("tabindex", "-1");
    }
  });

  searchBox.addEventListener("input", () => {
    const images = document.querySelectorAll(
      ".image[data-visible=true]"
    ) as NodeListOf<HTMLElement>;

    images.forEach((image) => {
      const tags = (image.dataset.tags as string)
        .toLowerCase()
        .replaceAll("'", "")
        .split(",") as Array<string>;
      const search = (searchBox as HTMLInputElement).value
        .toLowerCase()
        .replaceAll("'", "")
        .split(" ") as Array<string>;

      const values = new Array() as Array<boolean>;

      for (let index = 0; index < search.length; index++) {
        const word = search[index];
        const tagStatus = new Array() as Array<boolean>;
        for (let index = 0; index < tags.length; index++) {
          const tag = tags[index];
          if (tag.includes(word)) {
            tagStatus.push(true);
          } else {
            tagStatus.push(false);
          }
        }
        if (tagStatus.includes(true)) {
          values.push(true);
        } else {
          values.push(false);
        }
      }

      if (values.length > 0 && values.every((value) => value === true)) {
        image.style.display = "block";
      } else if (search.length === 0) {
        image.style.display = "block";
      } else {
        image.style.display = "none";
      }
    });
  });
</script>
