---
const { results: folders } = await fetch(
  "https://jvphotography.pages.dev/api/gallery/folders"
)
  .then((res) => res.json())
  .catch((error) => console.log(error));

interface Folder {
  id: string;
  slug: string;
  name: string;
}
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="robots" content="noindex, nofollow" />
    <title>Add Image</title>
  </head>
  <body>
    <main>
      <input
        type="password"
        id="password"
        name="password"
        placeholder="Password"
      />
      <input type="password" id="key" name="key" placeholder="Key" />
      <input type="text" id="name" name="name" placeholder="Image name" />
      <input type="text" id="slug" name="slug" placeholder="Image slug" />
      <textarea
        name="description"
        id="description"
        cols="30"
        rows="10"
        placeholder="Description"></textarea>
      <input type="text" name="tags" id="tags" placeholder="Tags" />
      <input type="date" name="date" id="date" />
      <input type="text" name="location" id="location" placeholder="Location" />
      <input
        type="file"
        id="thumbnail"
        name="thumbnail"
        placeholder="Thumbnail"
      />
      <input type="file" id="image" name="image" placeholder="Image" />
      <select name="folder" id="folder">
        {
          folders.map((folder: Folder) => (
            <option value={folder.id}>{folder.name}</option>
          ))
        }
      </select>
      <button id="submit">ADD IMAGE</button>
    </main>
  </body>
</html>

<style lang="scss">
  @use "../../styles/base";
  @use "../../styles/font";
  @use "../../styles/color";

  body {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    border-top: 6px solid color.$primary500;

    main {
      width: 600px;
      height: auto;
      padding: 100px 0;

      input,
      textarea,
      select {
        width: 100%;
        height: 50px;
        border-bottom: 1px solid color.$neutral500;
        outline: none;
        font-family: font.$sans;
        margin-bottom: 30px;
      }

      input[type="file"],
      textarea {
        padding-top: 13px;
      }

      button {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 160px;
        height: 40px;
        font-size: 14px;
        letter-spacing: 5px;
        color: color.$neutral950;
        font-weight: 500;
        font-family: font.$serifBold;
        position: relative;
        transition: 0.25s;
        outline: none;
        overflow: hidden;
        margin-left: auto;

        &::before {
          content: "";
          position: absolute;
          z-index: -1;
          top: var(--top, 0);
          left: var(--left, 0);
          width: var(--size, 0);
          height: var(--size, 0);
          opacity: var(--opacity, 1);
          background-color: color.$primary300;
          border-radius: 100px;
          transform: translate(-50%, -50%);
          transition-timing-function: cubic-bezier(0, 0.5, 0.5, 1);
          transition-property: width, height, opacity;
          transition-duration: var(--transition, 0);
        }

        &::after {
          content: "";
          position: absolute;
          left: 0;
          right: 0;
          bottom: 0;
          width: 100%;
          height: 1px;
          background-color: color.$neutral500;
          transition: 0.25s;
          z-index: -2;
        }

        &:hover,
        &:focus {
          color: color.$neutral50;

          &::after {
            height: 100%;
            background-color: color.$primary600;
          }
        }
      }
    }
  }
</style>

<script>
  const submit = document.querySelector("#submit") as HTMLElement;

  submit.addEventListener("mousedown", (e) => {
    const top: number = e.clientY - submit.getBoundingClientRect().top;
    const left: number = e.clientX - submit.getBoundingClientRect().left;

    submit.setAttribute(
      "style",
      `--transition:.5s;--top:${top}px;--left:${left}px;--size:100px;--opacity:0`
    );

    setTimeout(() => submit.removeAttribute("style"), 500);
  });

  submit.addEventListener("click", (e) => {
    const password = document.querySelector("#password") as HTMLInputElement;
    const key = document.querySelector("#key") as HTMLInputElement;
    const name = document.querySelector("#name") as HTMLInputElement;
    const slug = document.querySelector("#slug") as HTMLInputElement;
    const description = document.querySelector(
      "#description"
    ) as HTMLTextAreaElement;
    const tags = document.querySelector("#tags") as HTMLInputElement;
    const date = document.querySelector("#date") as HTMLInputElement;
    const location = document.querySelector("#location") as HTMLInputElement;
    const thumbnail = document.querySelector("#thumbnail") as HTMLInputElement;
    const image = document.querySelector("#image") as HTMLInputElement;
    const folder = document.querySelector("#folder") as HTMLInputElement;

    if (
      password.value &&
      key.value &&
      name.value &&
      slug.value &&
      description.value &&
      tags.value &&
      date.value &&
      location.value &&
      thumbnail.files &&
      image.files &&
      folder.value
    ) {
      if (image.files && image.files[0]) {
        const reader = new FileReader();
        reader.addEventListener("load", (e) => {
          const image64 = (e.target?.result as string).replace(
            "data:image/jpeg;base64,",
            ""
          );

          if (thumbnail.files && thumbnail.files[0]) {
            const reader = new FileReader();
            reader.addEventListener("load", (e) => {
              const thumbnail64 = (e.target?.result as string).replace(
                "data:image/jpeg;base64,",
                ""
              );

              fetch("/api/admin/image", {
                method: "POST",
                body: JSON.stringify({
                  authToken: password.value,
                  addImageAuthToken: key.value,
                  name: name.value,
                  slug: slug.value,
                  description: description.value,
                  tags: tags.value,
                  date: date.value,
                  location: location.value,
                  thumbnail: thumbnail64,
                  image: image64,
                  folder: folder.value,
                }),
                headers: {
                  "Content-Type": "application/json",
                },
              })
                .then((res) => {
                  console.log(res);
                })
                .catch((err) => {
                  console.log(err);
                });
            });
            reader.readAsDataURL(thumbnail.files[0]);
          }
        });
        reader.readAsDataURL(image.files[0]);
      }
    } else {
      console.error("Missing required fields");
    }
  });
</script>
